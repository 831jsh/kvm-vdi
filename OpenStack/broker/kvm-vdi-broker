#!/usr/bin/env python


import socket
import os, os.path
import logging
import logging.config
import json
from threading import Thread
from ConfigParser import ConfigParser
import ConsoleProxy 



def main():
    sockfile = "/usr/local/kvm-vdi/kvm-vdi-broker.sock"
    logdir = "/var/log/VDI";
    if not os.path.exists(logdir):
        os.makedirs(logdir)
    if os.path.exists( sockfile ):
        os.remove( sockfile )
    logging.config.fileConfig('/etc/kvm-vdi/kvm-vdi.cfg')
    logger = logging.getLogger('kvm-vdi-broker')
    server = socket.socket( socket.AF_UNIX, socket.SOCK_STREAM )
    server.bind(sockfile)
    os.chmod(sockfile, 0o777)
    server.listen(5)
    config = ConfigParser()
    config.read('/etc/kvm-vdi/kvm-vdi.cfg')
    port_range = config.get('broker', 'port_range')
    port_range = port_range.split(':')
    ports = list(range(int(port_range[0]), int(port_range[1]) + 1))
    ports.reverse()
    terminate = 0
    logger.info("Starting KVM-VDI broker")
    active_vms = {}
    try:
        while True:
            conn, addr = server.accept()
            while True: 
                data = conn.recv( 1024 )
                if data:
#                    try:
                    command=json.loads(data)
                    logger.debug(data)
                    if command['command'] == 'make-spice-channel':
                        if active_vms.get(command['vm_id'], None) is not None:
                            logger.debug("Channel for vm %s is already initialised", command['vm_id'])
                            bind_port = active_vms[command['vm_id']]
                            conn.send(json.dumps({"spice_port": bind_port}))
                        elif not command['hypervisor_ip'] or not command['spice_port']:
                            logger.debug("Got empty hypervisor ip / port")
                            conn.send(json.dumps({"error": "empty-values"}))
                        else:
                            bind_port = ports.pop()
                            active_vms[command['vm_id']]=bind_port
                            t=ConsoleProxy.createChannel(command['hypervisor_ip'], command['spice_port'], bind_port)
                            t.start()
                            conn.send(json.dumps({"spice_port": bind_port}))
#                    except:
#                        logger.debug("Invalid json data received" + data)
                if not data:
                    break
                break
    except KeyboardInterrupt:
        logger.debug("Keyboard interrupt")
    terminate=1
    time.sleep(1)
    server.close()
    os.remove( sockfile )

if __name__ == '__main__':
    main()