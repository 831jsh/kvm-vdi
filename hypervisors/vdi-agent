#!/usr/bin/env python
import time
import socket
import os, os.path
import json
import select
import subprocess
import re
from threading import Thread
from ConfigParser import ConfigParser
import logging
import logging.config


sockfile = "/usr/local/VDI/kvm-vdi.sock"
logdir = "/var/log/VDI";
if not os.path.exists(logdir):
    os.makedirs(logdir)
if os.path.exists( sockfile ):
    os.remove( sockfile )
logging.config.fileConfig('/usr/local/VDI/config')
logger = logging.getLogger('root')
server = socket.socket( socket.AF_UNIX, socket.SOCK_STREAM )
server.bind(sockfile)
os.chmod(sockfile, 0o777)
server.listen(5)
config = ConfigParser()
config.read('/usr/local/VDI/config')
socket_timeout = int(config.get('agent', 'socket_timeout'))


def vm_routine(vmname, username, password):
    global socket_timeout
    data = ""
    logger.info("Starting machine %s", vmname)
    err = subprocess.Popen("virsh start " + vmname, shell=True, stdout=subprocess.PIPE).communicate()
    socket_path = subprocess.Popen("virsh dumpxml " + vmname + "| xpath -q -e /domain/devices/channel/source/@path|grep kvm-vdi", shell=True, stdout=subprocess.PIPE).communicate()#get current spice channel path. Path changes on each VM startup
    socket_path = re.findall(r'"([^"]*)"', socket_path[0]) #remove everythig outside double quotes
    try:
	virtio_socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	virtio_socket.connect(socket_path[0])
	ready = select.select([virtio_socket], [], [], socket_timeout) #Read VMs spice channel for n seconds. We assume that VM must boot in n seconds and start ovirt-agent.
	is_logged=0
	retries=0
	if ready[0]:
	    logger.debug("oVirt agent is up")
	    while not is_logged and retries<5:
		logger.debug("Requesting new data for guest: %s", vmname)
		virtio_socket.sendall( '{"__name__":"refresh"}'+"\n") #let's ask data from oVirt agent on guest machine
		time.sleep(1)
		logger.debug("Reading SPICE channel")
		info = virtio_socket.recv(2048)
		info_lines=info.split("\n")
		for python_line in info_lines:#gou through all json responces, search for active-user
		    try:
	    		if python_line:#if line is not empty
			    reply_data=json.loads(python_line)
			    if reply_data['__name__']=="active-user":
				if reply_data["name"]=="None" or reply_data["name"]=="":
				    logger.debug ("There are currently no users logged into machine " +vmname)
				else:
				    logger.debug ("There's user " + reply_data["name"] + " logged into machine " + vmname)
				    is_logged=1
		    except:
			logger.debug("Non-json data: "+python_line)
		if not is_logged:#if there is no logged-in users, execute SSO
		    if retries:#if its not the first attempt, sleep a bit
		        time.sleep(5)
		    logger.info ("Trying SSO")
		    serial_message= '{"__name__":"login","username": "' + username + '","password": "' + password + '"}'+"\n"
		    logger.debug("Sending credentials for %s to VM: %s", username, vmname)
		    virtio_socket.sendall(serial_message)
		    retries += 1
	else:
	    logger.info ("Socket timeout for VM: ", vmname)
	    virtio_socket.close()
    except:
	logger.warning ("Virtio socket failure for VM: %s", vmname)
    logger.debug ("Closing vm %s, login thread", vmname)
    virtio_socket.close()



logger.info("Starting KVM-VDI hypervisor agent")
while True:
  conn, addr = server.accept()
  while True: 
    data = conn.recv( 1024 )
    if not data:
        break
    else:
	command=json.loads(data)
	fail=0
	try:
	    vmname=command['vmname']
	except:
	    fail=1
	try:
	    username=command['username']
	except:
	    fail=1
	try:
	    password=command['password']
	except:
	    fail=1
	if fail==1:
	    logger.info ("Illegal json")
	    logger.debug ("Illegal json: %s", data)
	else:
	    logger.debug("Starting login thread for vm: %s", vmname)
	    t = Thread(target=vm_routine, args=(vmname,username,password))
	    t.start()
        break

server.close()
os.remove( sockfile )
