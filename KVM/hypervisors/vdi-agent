#!/usr/bin/env python

import time
import socket
import os
import json
from ConfigParser import ConfigParser
import logging
import logging.config
from module import Variables
from module.VMStartupService import VMStartupService


def main():
    sockfile = "/usr/local/VDI/kvm-vdi.sock"
    logdir = "/var/log/VDI"
    if not os.path.exists(logdir):
        os.makedirs(logdir)
    if os.path.exists(sockfile):
        os.remove(sockfile)
    logging.config.fileConfig('/usr/local/VDI/config')
    logger = logging.getLogger('kvm-vdi-agent')
    logger.info("Starting KVM-VDI hypervisor agent")
    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    server.bind(sockfile)
    os.chmod(sockfile, 0o777)
    server.listen(5)
    config = ConfigParser()
    config.read('/usr/local/VDI/config')
    socket_timeout = int(config.get('agent', 'socket_timeout'))
    """ oVirt agent seems to have fixed issue with windows OS.
        Making login thread exit after login routine:
    """
    Variables.terminate = 1
    try:
        while True:
            conn, addr = server.accept()
            while True:
                data = conn.recv(1024)
                if not data:
                    break
                else:
                    try:
                        cmd = json.loads(data)
                        if cmd['command'] == 'STARTVM':
                            VMStartupService(
                                cmd['vmname'],
                                cmd['username'],
                                cmd['password'],
                                cmd['os_type'],
                                socket_timeout).start()
                            logger.debug(
                                "Starting login thread "
                                "for vm: %s", cmd['vmname'])
                    except Exception, e:
                        logger.info("Illegal json")
                        logger.debug("Illegal json: %s", e)
                break
    except KeyboardInterrupt:
        logger.debug("Keyboard interrupt")
    Variables.terminate = 1
    time.sleep(1)
    server.close()
    os.remove(sockfile)


if __name__ == '__main__':
    main()
